import subprocess
import time
import os
import logging
import platform
from types import *
from PyQt4 import QtCore, QtGui, QtDeclarative

def get_all_db(db_location):
    """Get a dictionary of all DBs."""
    all_dbs = os.listdir(db_location)
    db_dict = {'FASTA':[], 'BOWTIE':[], 'BLASTN':[], 'BLASTP':[]}  
    table_dict = {'Database name':[], 'Database type':[], 'Database size (KB)':[], 'Created':[]}
    
    for file in all_dbs:
        file_date, file_size = get_size_date_of_file(db_location+file)
        if file.endswith('.ebwt'):
            if file.split('.')[0] not in db_dict.get("BOWTIE"):
                db_dict['BOWTIE'].append(file.split('.')[0])
                table_dict['Database name'].append(file.split('.')[0])
                table_dict['Database type'].append('BOWTIE')
                table_dict['Created'].append(file_date)
                table_dict['Database size (KB)'].append((file_size/1000)*2)
        elif file.endswith('.fasta'):
            if file.split('.')[0] not in db_dict.get("FASTA"):
                db_dict['FASTA'].append(file.split('.')[0])
                
                table_dict['Database name'].append(file.split('.')[0])
                table_dict['Database type'].append('FASTA')
                table_dict['Created'].append(file_date)
                table_dict['Database size (KB)'].append(file_size/1000)
        elif file.endswith('.nsq'):
            if file.split('.')[0] not in db_dict.get("BLASTN"):
                db_dict['BLASTN'].append(file.split('.')[0])
                table_dict['Database name'].append(file.split('.')[0])
                table_dict['Database type'].append('BLAST DNA')
                table_dict['Created'].append(file_date)
                table_dict['Database size (KB)'].append(file_size/1000)    
        elif file.endswith('.psq'):
            if file.split('.')[0] not in db_dict.get("BLASTP"):
                db_dict['BLASTP'].append(file.split('.')[0])
                table_dict['Database name'].append(file.split('.')[0])
                table_dict['Database type'].append('BLAST Protein')
                table_dict['Created'].append(file_date)
                table_dict['Database size (KB)'].append(file_size/1000)
   
    return db_dict, table_dict

def get_size_date_of_file(db_file):
    """Gets file size and date."""
    file_date = time.ctime(os.path.getctime(db_file))
    file_size = os.stat(db_file).st_size 
    return (file_date, int(file_size))

def create_bowtie_database(db_name, database_file_location, db_location):
    """Creates Bowtie DB."""

    assert type(database_file_location) is StringType
    assert type(db_name) is StringType
    assert type(db_location) is StringType

    os.chdir(db_location)
    
    process = subprocess.Popen(["bowtie-build", database_file_location, db_location + str(db_name)])
    process.wait()
   
    if os.path.exists(db_location + str(db_name) + ".nhr") or os.path.exists(db_location + str(db_name) + ".phr"):
        return ("Database successfully created!", True)
    else:
        logging.debug(time.strftime("%d.%m.%Y um %H:%M:%S Uhr"))
        logging.debug(str(platform.system()+platform.release()))
        logging.exception('Got exception on main handler')
        return ("Error, database could not be created!", False)
        
def create_blast_database(db_name, database_file_location, db_location, blast_type):
    """Create a new DB for BLAST."""

    assert type(database_file_location) is StringType
    assert type(db_name) is StringType
    assert type(db_location) is StringType
    
    if blast_type == 'BLASTN':
        base_type = 'nucl'
    elif blast_type == 'BLASTP':
        base_type = 'prot'

    os.chdir(db_location)
    makedbcmd = 'makeblastdb -in ' + database_file_location + ' -dbtype ' + base_type  + ' -out ' + db_location + db_name
    os.system(makedbcmd)
    

    if os.path.exists(db_location + str(db_name) + ".rev.1.ebwt"):
        return ("Database successfully created!", True)
    else:
        logging.debug(time.strftime("%d.%m.%Y um %H:%M:%S Uhr"))
        logging.debug(str(platform.system()+platform.release()))
        logging.exception('Got exception on main handler')
        return ("Error, database could not be created!", False)
        
def create_fasta_db(db_name, database_file_location, db_location):
    """Creates a fasta DB."""
    assert type(database_file_location) is StringType
    assert type(db_location) is StringType
    assert type(db_name) is StringType
    
    os.chdir(db_location)
    try:
        f_src = open(database_file_location, 'r')
        data = f_src.read()
        f_dest = open(str(db_name + ".fasta"), 'w')
        f_dest.write(str(data))
        f_src.close()
        f_dest.close()
        return ("Database successfully created!", True)
    except (IOError, OSError):
        logging.debug(time.strftime("%d.%m.%Y um %H:%M:%S Uhr"))
        logging.debug(str(platform.system()+platform.release()))
        logging.exception('Got exception on main handler')
        return ("Error, database could not be created!", False)
        
    
def delete_databases(db_list, db_location):
    """Deletes all selected databases."""
    bowtie_endings = [".1.ebwt", ".2.ebwt", ".3.ebwt", ".4.ebwt", ".rev.1.ebwt", ".rev.2.ebwt"]
    fasta_ending = [".fasta"]
    blastn_endings = [".nhr", ".nin", ".nsq"]#, ".nog", ".nsd", ".nsi"]   # last 3 maybe not neccessary
    blastp_endings = [".phr", ".pin", ".psq"]#, ".pog", ".psd", ".psi"]
    print db_list
    bowtie = False
    fasta = False
    blastn = False
    blastp = False
    
    os.chdir(db_location)
    for db in db_list:
        try:
            if db[0] == 'BOWTIE':
                for extension in bowtie_endings:
                    os.remove(db_location + str(db[1]) + extension)
                bowtie = True
            if db[0] == 'FASTA':
                for extension in fasta_ending:
                    os.remove(db_location + str(db[1]) + extension)
                fasta = True
            if db[0] == 'BLAST DNA':
                for extension in blastn_endings:
                    os.remove(db_location + str(db[1]) + extension)
                blastn = True
            if db[0] == 'BLAST Protein':
                for extension in blastp_endings:
                    os.remove(db_location + str(db[1]) + extension)
                blastp = True
            
        except (IOError, OSError):
            logging.debug(time.strftime("%d.%m.%Y um %H:%M:%S Uhr"))
            logging.debug(str(platform.system()+platform.release()))
            logging.exception('Got exception on main handler')
            return ("Could not delete database!", False)
    
    if bowtie or fasta or blastn or blastp:
        return ("Database successfully deleted!", True)
    
